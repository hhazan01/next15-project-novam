// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String    @id @default(cuid())
  name               String
  email              String    @unique
  emailVerified      DateTime? @map("email_verified")
  image              String    @default("/Logo.jpg")
  password           String?
  status             String    @default("A")
  roleId             String?
  createdAt          DateTime  @default(now()) @db.Timestamptz
  updatedAt          DateTime  @updatedAt
  isTwoFactorEnabled Boolean   @default(false)

  TwoFactorConfirmation TwoFactorConfirmation?
  Role                  Role?                  @relation(fields: [roleId], references: [id])
  UserDealer            Agent[]

  @@map("users")
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Role {
  id   String @id @default(cuid())
  name String @unique

  Users          User[]
  RolePermission RolePermission[]

  @@map("roles")
}

model Permission {
  id             String           @id @default(cuid())
  name           String           @unique
  key            String           @unique
  rolePermission RolePermission[]

  @@map("permissions")
}

model RolePermission {
  roleId       String
  permissionId String

  Role       Role       @relation(fields: [roleId], references: [id], onDelete: Cascade)
  Permission Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@id([roleId, permissionId])
  @@unique([roleId, permissionId])
  @@map("role_permissions")
}

model Dealer {
  id        String   @id @default(cuid())
  name      String
  code      String   @unique
  status    String   @default("A")
  createdAt DateTime @default(now()) @db.Timestamptz
  updatedAt DateTime @updatedAt

  UserDealer Agent[]

  @@map("dealers")
}

model Agent {
  id        String   @id @default(cuid())
  userId    String
  dealerId  String?
  code      String?  @unique
  status    String   @default("A")
  type      String   @default("D")
  createdAt DateTime @default(now()) @db.Timestamptz

  User   User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  Dealer Dealer? @relation(fields: [dealerId], references: [id], onDelete: Cascade)

  @@map("agents")
}
